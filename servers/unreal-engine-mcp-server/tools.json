[
  {
    "name": "manage_asset",
    "description": "Search, browse, import, and create simple material assets.\n\nWhen to use this tool:\n- You want to list assets in the project Content directory (use /Game; /Content is auto-mapped).\n- You want to import files from disk into the project (e.g., FBX, PNG, WAV, EXR).\n- You want to generate a very basic Material asset by name at a path.\n\nSupported actions:\n- list: Returns assets in a folder (recursive behavior is auto-enabled for /Game).\n- import: Imports a file into the project at a destination path (e.g., /Game/Folder).\n- create_material: Creates a simple Material asset at a path.\n\nTips:\n- Unreal uses /Game for project content; this server maps /Content â†’ /Game automatically.\n- For large projects, listing /Game returns a sample subset for speed; refine to subfolders.\n\nExamples:\n- {\"action\":\"list\",\"directory\":\"/Game/ThirdPerson\"}\n- {\"action\":\"import\",\"sourcePath\":\"C:/Temp/Tree.fbx\",\"destinationPath\":\"/Game/Environment/Trees\"}\n- {\"action\":\"create_material\",\"name\":\"M_Mask\",\"path\":\"/Game/Materials\"}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Action to perform (list, import, create_material)"
      },
      {
        "name": "directory",
        "type": "string",
        "desc": "Directory path for listing"
      },
      {
        "name": "recursive",
        "type": "boolean",
        "desc": "List recursively"
      },
      {
        "name": "sourcePath",
        "type": "string",
        "desc": "Source file path for import"
      },
      {
        "name": "destinationPath",
        "type": "string",
        "desc": "Destination path for import"
      },
      {
        "name": "name",
        "type": "string",
        "desc": "Asset name"
      },
      {
        "name": "path",
        "type": "string",
        "desc": "Save path"
      }
    ]
  },
  {
    "name": "control_actor",
    "description": "Spawn, delete, and apply physics to actors in the level.\n\nWhen to use this tool:\n- Place an actor/mesh, remove an actor, or nudge an actor with a physics force.\n\nSupported actions:\n- spawn\n- delete\n- apply_force\n\nSpawning:\n- classPath can be a class name (e.g., StaticMeshActor, CameraActor) OR an asset path (e.g., /Engine/BasicShapes/Cube, /Game/Meshes/SM_Rock).\n- Asset paths auto-spawn StaticMeshActor with the mesh assigned.\n\nDeleting:\n- Finds actors by label/name (case-insensitive) and deletes matches.\n\nApply force:\n- Applies a world-space force vector to an actor with physics enabled.\n\nTips:\n- classPath accepts classes or asset paths; simple names like Cube auto-resolve to engine assets.\n- location/rotation are optional; defaults are used if omitted.\n- For delete/apply_force, provide actorName.\n\nExamples:\n- {\"action\":\"spawn\",\"classPath\":\"/Engine/BasicShapes/Cube\",\"location\":{\"x\":0,\"y\":0,\"z\":100}}\n- {\"action\":\"delete\",\"actorName\":\"Cube_1\"}\n- {\"action\":\"apply_force\",\"actorName\":\"PhysicsBox\",\"force\":{\"x\":0,\"y\":0,\"z\":5000}}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Action to perform (spawn, delete, apply_force)"
      },
      {
        "name": "actorName",
        "type": "string",
        "desc": "Actor name (optional for spawn - auto-generated if not provided, required for delete/apply_force)"
      },
      {
        "name": "classPath",
        "type": "string",
        "desc": "Actor class (StaticMeshActor, CameraActor) OR asset path (/Engine/BasicShapes/Cube, /Game/MyMesh) OR simple shape name (Cube, Sphere). Asset paths automatically spawn StaticMeshActor with mesh applied. Simple names auto-resolve to engine assets."
      },
      {
        "name": "location",
        "type": "object",
        "desc": "Actor location {x, y, z}"
      },
      {
        "name": "rotation",
        "type": "object",
        "desc": "Actor rotation {pitch, yaw, roll}"
      },
      {
        "name": "force",
        "type": "object",
        "desc": "Force vector {x, y, z}"
      }
    ]
  },
  {
    "name": "control_editor",
    "description": "Play/Stop PIE, position the editor camera, and switch common view modes.\n\nWhen to use this tool:\n- Start/stop a PIE session, move the viewport camera, or change viewmode (Lit/Unlit/Wireframe/etc.).\n\nSupported actions:\n- play\n- stop\n- set_camera\n- set_view_mode\n\nNotes:\n- View modes are validated; unsafe modes are blocked.\n- Camera accepts location/rotation (optional); values normalized.\n\nExamples:\n- {\"action\":\"play\"}\n- {\"action\":\"set_camera\",\"location\":{\"x\":0,\"y\":-600,\"z\":250},\"rotation\":{\"pitch\":0,\"yaw\":0,\"roll\":0}}\n- {\"action\":\"set_view_mode\",\"viewMode\":\"Wireframe\"}\n- {\"action\":\"stop\"}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Editor action (play, stop, set_camera, set_view_mode)"
      },
      {
        "name": "location",
        "type": "object",
        "desc": "Camera location {x, y, z}"
      },
      {
        "name": "rotation",
        "type": "object",
        "desc": "Camera rotation {pitch, yaw, roll}"
      },
      {
        "name": "viewMode",
        "type": "string",
        "desc": "View mode (Lit, Unlit, Wireframe, etc.)"
      }
    ]
  },
  {
    "name": "manage_level",
    "description": "Load/save/stream levels, create lights, and trigger lighting builds.\n\nWhen to use this tool:\n- Switch to a level, save the current level, stream sublevels, add a light, or start a lighting build.\n\nSupported actions:\n- load\n- save\n- stream\n- create_light\n- build_lighting\n\nTips:\n- Use /Game paths for levels (e.g., /Game/Maps/Level).\n- For streaming, set shouldBeLoaded and shouldBeVisible accordingly.\n- For lights, provide lightType and optional location/intensity.\n\nExamples:\n- {\"action\":\"load\",\"levelPath\":\"/Game/Maps/Lobby\"}\n- {\"action\":\"stream\",\"levelName\":\"Sublevel_A\",\"shouldBeLoaded\":true,\"shouldBeVisible\":true}\n- {\"action\":\"create_light\",\"lightType\":\"Directional\",\"name\":\"KeyLight\",\"intensity\":5.0}\n- {\"action\":\"build_lighting\",\"quality\":\"High\"}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Level action (load, save, stream, create_light, build_lighting)"
      },
      {
        "name": "levelPath",
        "type": "string",
        "desc": "Level path"
      },
      {
        "name": "levelName",
        "type": "string",
        "desc": "Level name"
      },
      {
        "name": "lightType",
        "type": "string",
        "desc": "Light type (Directional, Point, Spot, Rect)"
      },
      {
        "name": "location",
        "type": "object",
        "desc": "Light location {x, y, z}"
      },
      {
        "name": "rotation",
        "type": "object",
        "desc": "Light rotation {pitch, yaw, roll}"
      },
      {
        "name": "quality",
        "type": "string",
        "desc": "Lighting build quality"
      }
    ]
  },
  {
    "name": "animation_physics",
    "description": "Create animation blueprints, play montages, and set up simple ragdolls.\n\nWhen to use this tool:\n- Generate an Anim Blueprint for a skeleton, play a Montage/Animation on an actor, or enable ragdoll.\n\nSupported actions:\n- create_animation_bp\n- play_montage\n- setup_ragdoll\n\nTips:\n- Ensure the montage/animation is compatible with the target actor/skeleton.\n- setup_ragdoll requires a valid physicsAssetName on the skeleton.\n- Use savePath when creating new assets.\n\nExamples:\n- {\"action\":\"create_animation_bp\",\"name\":\"ABP_Hero\",\"skeletonPath\":\"/Game/Characters/Hero/SK_Hero_Skeleton\",\"savePath\":\"/Game/Characters/Hero\"}\n- {\"action\":\"play_montage\",\"actorName\":\"Hero\",\"montagePath\":\"/Game/Anim/MT_Attack\"}\n- {\"action\":\"setup_ragdoll\",\"skeletonPath\":\"/Game/Characters/Hero/SK_Hero_Skeleton\",\"physicsAssetName\":\"PHYS_Hero\"}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Action to perform (create_animblueprint, add_montage, enable_ragdoll, add_constraint, etc.)"
      },
      {
        "name": "name",
        "type": "string",
        "desc": "Asset or actor name"
      },
      {
        "name": "skeletonPath",
        "type": "string",
        "desc": "Path to skeleton asset"
      },
      {
        "name": "animationPath",
        "type": "string",
        "desc": "Path to animation asset"
      },
      {
        "name": "actorName",
        "type": "string",
        "desc": "Actor name for physics operations"
      }
    ]
  },
  {
    "name": "create_effect",
    "description": "Create particles/FX and lightweight debug shapes for rapid iteration.\n\nWhen to use this tool:\n- Spawn a Niagara system at a location, create a particle effect by type tag, or draw debug geometry for planning.\n\nSupported actions:\n- particle\n- niagara\n- debug_shape\n\nTips:\n- Set color as RGBA [r,g,b,a]; scale defaults to 1 if omitted.\n- Use debug shapes for quick layout planning and measurements.\n\nExamples:\n- {\"action\":\"niagara\",\"systemPath\":\"/Game/FX/NS_Explosion\",\"location\":{\"x\":0,\"y\":0,\"z\":200},\"scale\":1.0}\n- {\"action\":\"particle\",\"effectType\":\"Smoke\",\"name\":\"SMK1\",\"location\":{\"x\":100,\"y\":0,\"z\":50}}\n- {\"action\":\"debug_shape\",\"shape\":\"Sphere\",\"location\":{\"x\":0,\"y\":0,\"z\":0},\"size\":100,\"duration\":5}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Effect action (create_particle, create_niagara, draw_debug)"
      },
      {
        "name": "effectType",
        "type": "string",
        "desc": "Type of effect (fire, water, explosion, smoke, etc.)"
      },
      {
        "name": "location",
        "type": "object",
        "desc": "Effect location {x, y, z}"
      },
      {
        "name": "scale",
        "type": "number",
        "desc": "Effect scale"
      },
      {
        "name": "duration",
        "type": "number",
        "desc": "Effect duration in seconds"
      }
    ]
  },
  {
    "name": "manage_blueprint",
    "description": "Create new Blueprints and add components programmatically.\n\nWhen to use this tool:\n- Quickly scaffold a Blueprint asset or add a component to an existing Blueprint.\n\nSupported actions:\n- create\n- add_component\n\nTips:\n- blueprintType can be Actor, Pawn, Character, etc.\n- Component names should be unique within the Blueprint.\n\nExamples:\n- {\"action\":\"create\",\"name\":\"BP_Switch\",\"blueprintType\":\"Actor\",\"savePath\":\"/Game/Blueprints\"}\n- {\"action\":\"add_component\",\"name\":\"BP_Switch\",\"componentType\":\"PointLightComponent\",\"componentName\":\"KeyLight\"}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Blueprint action (create, add_component, add_variable)"
      },
      {
        "name": "name",
        "type": "string",
        "desc": "Blueprint name"
      },
      {
        "name": "path",
        "type": "string",
        "desc": "Save path"
      },
      {
        "name": "parentClass",
        "type": "string",
        "desc": "Parent class name"
      },
      {
        "name": "componentType",
        "type": "string",
        "desc": "Component type to add"
      }
    ]
  },
  {
    "name": "build_environment",
    "description": "Environment authoring helpers (landscape, foliage).\n\nWhen to use this tool:\n- Create a procedural terrain alternative, add/paint foliage, or attempt a landscape workflow.\n\nSupported actions:\n- create_landscape\n- sculpt\n- add_foliage\n- paint_foliage\n\nImportant:\n- Native Landscape creation via Python is limited and may return a helpful error suggesting Landscape Mode in the editor.\n- Foliage helpers create FoliageType assets and support simple placement.\n\nTips:\n- Adjust brushSize and strength to tune sculpting results.\n\nExamples:\n- {\"action\":\"create_landscape\",\"name\":\"Landscape_Basic\",\"sizeX\":1024,\"sizeY\":1024}\n- {\"action\":\"add_foliage\",\"name\":\"FT_Grass\",\"meshPath\":\"/Game/Foliage/SM_Grass\",\"density\":300}\n- {\"action\":\"paint_foliage\",\"foliageType\":\"/Game/Foliage/Types/FT_Grass\",\"position\":{\"x\":0,\"y\":0,\"z\":0},\"brushSize\":300}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Environment action (create_landscape, add_foliage, sculpt_terrain)"
      },
      {
        "name": "location",
        "type": "object",
        "desc": "Environment location {x, y, z}"
      },
      {
        "name": "size",
        "type": "object",
        "desc": "Environment size parameters"
      },
      {
        "name": "materialPath",
        "type": "string",
        "desc": "Material path for terrain"
      }
    ]
  },
  {
    "name": "system_control",
    "description": "Performance toggles, quality settings, audio playback, simple UI helpers, screenshots, and engine lifecycle.\n\nWhen to use this tool:\n- Toggle profiling and FPS stats, adjust quality (sg.*), play a sound, create/show a basic widget, take a screenshot, or launch/quit the editor.\n\nSupported actions:\n- profile\n- show_fps\n- set_quality\n- play_sound\n- create_widget\n- show_widget\n- screenshot\n- engine_start\n- engine_quit\n\nTips:\n- Screenshot resolution format: 1920x1080.\n- engine_start can read UE project path from env; provide editorExe/projectPath if needed.\n\nExamples:\n- {\"action\":\"show_fps\",\"enabled\":true}\n- {\"action\":\"set_quality\",\"category\":\"Shadows\",\"level\":2}\n- {\"action\":\"play_sound\",\"soundPath\":\"/Game/Audio/SFX/Click\",\"volume\":0.5}\n- {\"action\":\"screenshot\",\"resolution\":\"1920x1080\"}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "System action (set_quality, toggle_stats, create_sound, create_widget, take_screenshot)"
      },
      {
        "name": "quality",
        "type": "string",
        "desc": "Quality level (low, medium, high, epic)"
      },
      {
        "name": "statType",
        "type": "string",
        "desc": "Statistics type (fps, gpu, memory)"
      },
      {
        "name": "soundPath",
        "type": "string",
        "desc": "Path to sound asset"
      },
      {
        "name": "widgetClass",
        "type": "string",
        "desc": "UI widget class"
      }
    ]
  },
  {
    "name": "console_command",
    "description": "Execute an Unreal console command with built-in safety.\n\nWhen to use this tool:\n- Fire a specific command (e.g., stat fps, viewmode wireframe, r.ScreenPercentage 75).\n\nSafety:\n- Dangerous commands are blocked (quit/exit, GPU crash triggers, unsafe visualizebuffer modes, etc.).\n- Unknown commands return a warning instead of crashing.\n\nTips:\n- Prefer dedicated tools (system_control, control_editor) when available for more structured control.\n\nExamples:\n- {\"command\":\"stat fps\"}\n- {\"command\":\"viewmode wireframe\"}\n- {\"command\":\"r.ScreenPercentage 75\"}",
    "arguments": [
      {
        "name": "command",
        "type": "string",
        "desc": "Console command to execute"
      }
    ]
  },
  {
    "name": "manage_rc",
    "description": "Create and manage Remote Control presets; expose actors/properties; set/get values.\n\nWhen to use this tool:\n- Automate Remote Control (RC) preset authoring and interaction.\n\nSupported actions:\n- create_preset\n- expose_actor\n- expose_property\n- list_fields\n- set_property\n- get_property\n\nTips:\n- value must be JSON-serializable.\n- Use objectPath/presetPath with full asset/object paths.\n\nExamples:\n- {\"action\":\"create_preset\",\"name\":\"LivePreset\",\"path\":\"/Game/RCPresets\"}\n- {\"action\":\"expose_actor\",\"presetPath\":\"/Game/RCPresets/LivePreset\",\"actorName\":\"CameraActor\"}\n- {\"action\":\"expose_property\",\"presetPath\":\"/Game/RCPresets/LivePreset\",\"objectPath\":\"/Script/Engine.Default__Engine\",\"propertyName\":\"GameUserSettings\"}\n- {\"action\":\"list_fields\",\"presetPath\":\"/Game/RCPresets/LivePreset\"}\n- {\"action\":\"set_property\",\"objectPath\":\"/Game/MyActor\",\"propertyName\":\"CustomFloat\",\"value\":0.5}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "RC action (create_preset, expose_actor, expose_property, list_fields, set_property, get_property)"
      },
      {
        "name": "presetId",
        "type": "string",
        "desc": "Remote Control preset ID"
      },
      {
        "name": "objectPath",
        "type": "string",
        "desc": "Object path in Unreal"
      },
      {
        "name": "propertyName",
        "type": "string",
        "desc": "Property name to expose or modify"
      },
      {
        "name": "value",
        "type": "any",
        "desc": "Value to set for property"
      }
    ]
  },
  {
    "name": "manage_sequence",
    "description": "Create/open Level Sequences, bind actors, add cameras, and control playback.\n\nWhen to use this tool:\n- Build quick cinematics: create/open a sequence, add a camera or actors, tweak properties, and play.\n\nSupported actions:\n- create\n- open\n- add_camera\n- add_actor\n- add_actors\n- remove_actors\n- get_bindings\n- add_spawnable_from_class\n- play\n- pause\n- stop\n- set_properties\n- get_properties\n- set_playback_speed\n\nTips:\n- Set spawnable=true to auto-create a camera actor.\n- Use frameRate/lengthInFrames to define timing; use playbackStart/End to trim.\n\nExamples:\n- {\"action\":\"create\",\"name\":\"Intro\",\"path\":\"/Game/Cinematics\"}\n- {\"action\":\"add_camera\",\"spawnable\":true}\n- {\"action\":\"add_actor\",\"actorName\":\"Hero\"}\n- {\"action\":\"play\",\"loopMode\":\"once\"}\n- {\"action\":\"set_properties\",\"path\":\"/Game/Cinematics/Intro\",\"frameRate\":24,\"lengthInFrames\":480}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Sequence action (create, open, add_camera, add_actor, play, pause, stop, set_properties)"
      },
      {
        "name": "name",
        "type": "string",
        "desc": "Sequence name"
      },
      {
        "name": "path",
        "type": "string",
        "desc": "Sequence path"
      },
      {
        "name": "actorName",
        "type": "string",
        "desc": "Actor name to add to sequence"
      },
      {
        "name": "frameRate",
        "type": "number",
        "desc": "Frame rate for sequence"
      },
      {
        "name": "loopMode",
        "type": "string",
        "desc": "Playback loop mode (once, loop, pingpong)"
      }
    ]
  },
  {
    "name": "inspect",
    "description": "Read object info and set properties with validation.\n\nWhen to use this tool:\n- Inspect an object by path (class default object or actor/component) and optionally modify properties.\n\nSupported actions:\n- inspect_object\n- set_property\n\nTips:\n- propertyName is case-sensitive; ensure it exists on the target object.\n- For class default objects (CDOs), use the /Script/...Default__Class path.\n\nExamples:\n- {\"action\":\"inspect_object\",\"objectPath\":\"/Script/Engine.Default__Engine\"}\n- {\"action\":\"set_property\",\"objectPath\":\"/Game/MyActor\",\"propertyName\":\"CustomBool\",\"value\":true}",
    "arguments": [
      {
        "name": "action",
        "type": "string",
        "desc": "Inspect action (inspect_object, set_property)"
      },
      {
        "name": "objectPath",
        "type": "string",
        "desc": "Object path to inspect"
      },
      {
        "name": "propertyName",
        "type": "string",
        "desc": "Property name"
      },
      {
        "name": "value",
        "type": "any",
        "desc": "Value to set for property"
      }
    ]
  }
]